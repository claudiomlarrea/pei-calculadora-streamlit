import streamlit as st
import pandas as pd
import io

# ------------------------------------------
# Configurar la p√°gina
# ------------------------------------------
st.set_page_config(
    page_title="Calculadora PEI UCU",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä Calculadora PEI - Universidad Cat√≥lica de Cuyo")

# ------------------------------------------
# Subir archivo Excel
# ------------------------------------------
uploaded_file = st.file_uploader(
    "üìÅ Sube tu archivo Excel exportado desde Google Sheets",
    type=["xlsx"]
)

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.success("‚úÖ Archivo cargado correctamente.")
    
    # Normalizar nombres de columnas para b√∫squeda robusta
    df.columns = [col.strip().lower().replace("  ", " ") for col in df.columns]

    st.subheader("üëÄ Vista previa de los datos")
    st.dataframe(df.head())

    # ------------------------------------------
    # 1Ô∏è‚É£ Total de actividades = total de filas
    # ------------------------------------------
    total_actividades = df.shape[0]
    st.markdown("## üî¢ Total de Actividades")
    st.metric("Cantidad total", total_actividades)

    # ------------------------------------------
    # 2Ô∏è‚É£ Cantidad por Objetivo Espec√≠fico
    # ------------------------------------------
    st.markdown("## üéØ Actividades por Objetivo Espec√≠fico")

    # Filtrar columnas v√°lidas: que contengan 'actividades objetivo'
    actividades_cols = [col for col in df.columns if 'actividades objetivo' in col]

    resultados_obj = []
    for col in actividades_cols:
        suma = pd.to_numeric(df[col], errors='coerce').fillna(0).sum()
        resultados_obj.append({
            "Objetivo": col.title(),
            "Cantidad": int(suma)
        })

    df_objetivos = pd.DataFrame(resultados_obj)
    st.dataframe(df_objetivos)

    # ------------------------------------------
    # 3Ô∏è‚É£ Cantidad por Unidad Acad√©mica o Administrativa
    # ------------------------------------------
    st.markdown("## üèõÔ∏è Actividades por Unidad Acad√©mica o Administrativa")

    # Detectar la columna correcta ignorando may√∫sculas y espacios
    col_unidad = [col for col in df.columns if "unidad acad√©mica" in col or "unidad academica" in col or "unidad" in col]

    if col_unidad:
        col_unidad = col_unidad[0]
        df_unidades = df.groupby(col_unidad).size().reset_index(name="Cantidad de Actividades")
        st.dataframe(df_unidades)
    else:
        st.warning("‚ö†Ô∏è No se encontr√≥ la columna 'Unidad Acad√©mica o Administrativa'. Revisa el nombre exacto.")

    # ------------------------------------------
    # 4Ô∏è‚É£ Exportar resultados
    # ------------------------------------------
    st.markdown("## üíæ Exportar Resultados a Excel")

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        pd.DataFrame({"Indicador": ["Total de Actividades"], "Valor": [total_actividades]}).to_excel(
            writer, sheet_name="Resumen General", index=False)
        df_objetivos.to_excel(writer, sheet_name="Por Objetivo", index=False)
        if col_unidad:
            df_unidades.to_excel(writer, sheet_name="Por Unidad", index=False)
        df.to_excel(writer, sheet_name="Datos Originales", index=False)

    st.download_button(
        label="üì• Descargar todos los resultados (.xlsx)",
        data=output.getvalue(),
        file_name="Resumen_PEI.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

else:
    st.info("üîë Por favor, sube primero tu archivo Excel para realizar el an√°lisis.")
